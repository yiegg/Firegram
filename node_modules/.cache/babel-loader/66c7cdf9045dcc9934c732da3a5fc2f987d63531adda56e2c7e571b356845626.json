{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\nimport { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';\nimport { collection } from \"firebase/firestore\";\nconst useStorage = file => {\n  _s();\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    //references\n    const storageRef = ref(projectStorage, file.name);\n    const collectionRef = collection(projectFirestore, 'images');\n    uploadBytesResumable(storageRef, file).on('state_changed', snap => {\n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, () => {\n      getDownloadURL(storageRef).then(url => {\n        collectionRef.addDoc({\n          url,\n          createdAt: timestamp\n        });\n        setUrl(url);\n      });\n    });\n  }, [file]);\n  return {\n    progress,\n    url,\n    error\n  };\n};\n_s(useStorage, \"xn2AiAzche7NzWswJ7VS1PhvjkU=\");\nexport default useStorage;","map":{"version":3,"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","ref","uploadBytesResumable","getDownloadURL","collection","useStorage","file","_s","progress","setProgress","error","setError","url","setUrl","storageRef","name","collectionRef","on","snap","percentage","bytesTransferred","totalBytes","err","then","addDoc","createdAt"],"sources":["/Users/robert/Downloads/firegram/src/hooks/useStorage.js"],"sourcesContent":["\nimport { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\nimport {ref, uploadBytesResumable, getDownloadURL} from 'firebase/storage'\nimport { collection } from \"firebase/firestore\";\n\nconst useStorage = (file) => {\n    const[progress, setProgress] = useState(0);\n    const[error, setError] = useState(null);\n    const[url, setUrl] = useState(null);\n\n    useEffect(() => {\n        //references\n        const storageRef = ref(projectStorage, file.name);\n        const collectionRef = collection(projectFirestore, 'images');\n\n        uploadBytesResumable(storageRef, file).on('state_changed', (snap) => {\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, (err) => {\n            setError(err);\n        }, () => {\n            getDownloadURL(storageRef).then((url) => \n            {   collectionRef.addDoc({url, createdAt: timestamp});\n                setUrl(url);\n            });\n        })\n    },[file]);\n\n    return {progress, url, error};\n}\n\nexport default useStorage;"],"mappings":";AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,gBAAgB,EAAEC,SAAS,QAAQ,oBAAoB;AAChF,SAAQC,GAAG,EAAEC,oBAAoB,EAAEC,cAAc,QAAO,kBAAkB;AAC1E,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACzB,MAAK,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAC1C,MAAK,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACvC,MAAK,CAACgB,GAAG,EAAEC,MAAM,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMiB,UAAU,GAAGb,GAAG,CAACH,cAAc,EAAEQ,IAAI,CAACS,IAAI,CAAC;IACjD,MAAMC,aAAa,GAAGZ,UAAU,CAACL,gBAAgB,EAAE,QAAQ,CAAC;IAE5DG,oBAAoB,CAACY,UAAU,EAAER,IAAI,CAAC,CAACW,EAAE,CAAC,eAAe,EAAGC,IAAI,IAAK;MACjE,IAAIC,UAAU,GAAID,IAAI,CAACE,gBAAgB,GAAGF,IAAI,CAACG,UAAU,GAAI,GAAG;MAChEZ,WAAW,CAACU,UAAU,CAAC;IAC3B,CAAC,EAAGG,GAAG,IAAK;MACRX,QAAQ,CAACW,GAAG,CAAC;IACjB,CAAC,EAAE,MAAM;MACLnB,cAAc,CAACW,UAAU,CAAC,CAACS,IAAI,CAAEX,GAAG,IACpC;QAAII,aAAa,CAACQ,MAAM,CAAC;UAACZ,GAAG;UAAEa,SAAS,EAAEzB;QAAS,CAAC,CAAC;QACjDa,MAAM,CAACD,GAAG,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,EAAC,CAACN,IAAI,CAAC,CAAC;EAET,OAAO;IAACE,QAAQ;IAAEI,GAAG;IAAEF;EAAK,CAAC;AACjC,CAAC;AAAAH,EAAA,CAxBKF,UAAU;AA0BhB,eAAeA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}